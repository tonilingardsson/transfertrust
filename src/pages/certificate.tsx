import { ConnectButton } from '@rainbow-me/rainbowkit';
import { useAccount, useWriteContract, useSimulateContract } from 'wagmi';
import styles from '../styles/Home.module.css';
import Head from 'next/head';
import '@rainbow-me/rainbowkit/styles.css';
import { useRouter } from 'next/router';
import { useEffect } from 'react';
import { CONTRACT_ABI } from '../utils/abi';
import { CONTRACT_ADDRESS } from '../utils/config';
import { ethers } from 'ethers';

import path from 'path';
import fs from 'fs';

export async function getStaticProps() {
  const filePath = path.join(process.cwd(), 'src/data/carCertificate.json');
  const jsonData = fs.readFileSync(filePath, 'utf-8');
  const carCertificate = JSON.parse(jsonData);

  return {
    props: { carCertificate },
  };
}

function Certificate({ carCertificate }: { carCertificate: any }) {
  const { isConnected } = useAccount();
  const router = useRouter();

  // Simulate the contract write operation
  const { data: simulationData, error: simulationError } = useSimulateContract({
    address: CONTRACT_ADDRESS,
    abi: CONTRACT_ABI,
    functionName: 'createCarStatusCertificate',
    args: [], // Add the 10 arguments here for the createCarStatusCertificate function
  });

  // Execute the contract write operation
  const {
    write,
    isLoading: isWriting,
    error: writeError,
  } = useWriteContract({
    addressOrName: CONTRACT_ADDRESS,
    contractInterface: CONTRACT_ABI,
    functionName: 'createNFT',
    args: [JSON.stringify(carCertificate)], // Pass the JSON string as the argument
  });

  // Automatically create the NFT when the component mounts
  useEffect(() => {
    // useSimulateContract: Simulates the contract write operation and checks if it will succeed without actually sending a transaction.
    // useWriteContract: Prepares and executes the contract write operation.
    if (simulationData && !simulationError && !isWriting) {
      write();
    }
  }, [simulationData, simulationError, isWriting, write]);

  function handleShare() {
    const shareData = {
      title: 'TransferTrust',
      text: 'Check out this car on TransferTrust!',
      url: 'http://localhost:3000/sharedData', // Replace with your website URL
    };
    navigator.share(shareData);
    router.push('/sale');
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>TransferTrust App</title>
        <meta
          content='Generated by @rainbow-me/create-rainbowkit'
          name='description'
        />
        <link href='./logo.png' rel='icon' />
      </Head>
      <nav className='bg-white shadow-lg'>
        <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>
          <div className='flex justify-between h-16'>
            <div className='flex items-center'>
              <h1 className='text-2xl font-bold text-gray-900'>Logo here!</h1>
              <h3>Sell your car with TransferTrust</h3>
            </div>
            <div className='flex items-center'>
              <ConnectButton />
            </div>
          </div>
        </div>
      </nav>

      <main className='max-w-7xl mx-auto py-6 sm:px-6 lg:px-8'>
        {isConnected ? (
          <div className='grid grid-cols-1 gap-6'>
            <div className='bg-white shadow sm:rounded-lg p-6'>
              <h2 className='text-xl font-semibold mb-4'>Car Certificate</h2>
              <p>Token ID: {carCertificate?.tokenId}</p>
              <p>Owner: {carCertificate?.owner}</p>
              <table className='table'>
                <thead>
                  <tr>
                    <th>Property</th>
                    <th>Value</th>
                  </tr>
                </thead>
                <tbody>
                  {Object.entries(carCertificate.carDetails).map(
                    ([key, value]) => (
                      <tr key={key}>
                        <td>{key}</td>
                        <td>{value}</td>
                      </tr>
                    )
                  )}
                </tbody>
              </table>
              <button
                className='iekbcc0 iekbcc9 ju367v78 ju367v7t ju367v9i ju367vn ju367vei ju367vf3 ju367v16 ju367v1h ju367v2g ju367v8u _12cbo8i3 ju367v8r _12cbo8i4 _12cbo8i6'
                onClick={handleShare}
                type='submit'
              >
                Share Certificate
              </button>
            </div>
            <div className='bg-white shadow sm:rounded-lg p-6'>
              <h2 className='text-xl font-semibold mb-4'>Your Vehicles</h2>
              {/* <VehicleList contractAddress={CONTRACT_ADDRESS} /> */}
            </div>
          </div>
        ) : (
          <div className='text-center py-12'>
            <h2 className='text-2xl font-semibold text-gray-900'>
              Please connect your wallet to use TransferTrust
            </h2>
            <p className='mt-2 text-gray-600'>
              Connect your wallet to create and manage vehicle certificates
            </p>
          </div>
        )}
      </main>
    </div>
  );
}

export default Certificate;
